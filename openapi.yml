openapi: 3.1.0
info:
  title: CompetitionEngine API
  version: '0.1.0'
  description: >
    REST API для управления турнирами, командами и участниками.
servers:
  - url: https://api.server.test/{version}
    description: Engine server
    variables:
      version:
        description: API version
        default: v1
        enum: [v1]

security:
  - bearerAuth: []

tags:
  - name: Engine
    description: Interaction with CompetitionEngine

paths:
  ############################################################
  #  TOURNAMENTS
  ############################################################
  /tour:
    post:
      summary: Create a new tournament
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
      responses:
        '201':
          description: Tournament created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /tour/{tourId}:
    parameters:
      - $ref: '#/components/parameters/TourId'
    get:
      summary: Get tournament by ID
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Tournament data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      summary: Replace tournament by ID
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
      responses:
        '200':
          description: Tournament updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Delete tournament by ID
      security: [ { bearerAuth: [] } ]
      responses:
        '204': { description: Tournament deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  ############################################################
  #  BRACKETS
  ############################################################
  /bracket/{tourId}:
    parameters:
      - $ref: '#/components/parameters/TourId'
    get:
      summary: Get bracket for tournament
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Bracket data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bracket'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      summary: Replace entire bracket
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bracket'
      responses:
        '200':
          description: Bracket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bracket'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  ############################################################
  #  MATCHES — nested under tournament
  ############################################################
  /tour/{tourId}/matches:
    parameters:
      - $ref: '#/components/parameters/TourId'
    get:
      summary: List matches of a tournament
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Array of matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    post:
      summary: Create a new match inside a tournament
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '201':
          description: Match created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /tour/{tourId}/matches/{matchId}:
    parameters:
      - $ref: '#/components/parameters/TourId'
      - $ref: '#/components/parameters/MatchId'
    get:
      summary: Get match by ID inside a tournament
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Match data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      summary: Replace match by ID inside a tournament
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          description: Match replaced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      summary: Update match by ID inside a tournament
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          description: Match updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Delete match by ID inside a tournament
      security: [ { bearerAuth: [] } ]
      responses:
        '204': { description: Match deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  ############################################################
  #  GLOBAL READ-ONLY ACCESS TO A MATCH
  ############################################################
  /matches/{matchId}:
    parameters:
      - $ref: '#/components/parameters/MatchId'
    get:
      summary: Get match by ID (no tournament context)
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Match data (with canonical URL)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Match'
                  - type: object
                    properties:
                      canonical:
                        type: string
                        description: Canonical URL under /tour/{tourId}/matches/{matchId}
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TourId:
      name: tourId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    MatchId:
      name: matchId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  responses:
    Unauthorized:
      description: Invalid or missing JWT bearer token
    Forbidden:
      description: Authenticated but lacking `ROLE_ADMIN`
    NotFound:
      description: Resource not found

  schemas:

    Tour:
      type: object
      required:
        - id
        - title
        - description
        - sport
        - typeTournament
        - typeGroup
        - startTime
        - maxParticipants
        - place
        - organizerId
        - participants
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        sport:
          type: string
          enum:
            - football
            - basketball
            - tennis
            - boxing
            - chess
            - jiujitsu
        typeTournament:
          type: string
          enum:
            - solo
            - team
        typeGroup:
          type: string
          enum:
            - olympic
            - swiss
            - round_robin
        startTime:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        maxParticipants:
          type: integer
          minimum: 1
        place:
          type: string
        organizerId:
          type: string
          format: uuid
        participants:
          type: array
          items:
            type: string
            format: uuid

    Bracket:
      type: object
      required:
        - matches
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/Match'

    Match:
      type: object
      required:
        - id
        - plannedStartTime
        - plannedEndTime
        - participants
        - status
        - parentMatches
      properties:
        id:
          type: string
          format: uuid
        tournamentId:
          type: string
          format: uuid
        plannedStartTime:
          type: string
          format: date-time
        plannedEndTime:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
          nullable: true
        finishedAt:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum:
            - prepared
            - ongoing
            - finished
        winner:
          type: string
          format: uuid
          nullable: true
        parentMatches:
          type: array
          items:
            type: string
            format: uuid
        participants:
          type: array
          items:
            $ref: '#/components/schemas/MatchParticipant'

    MatchParticipant:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        score:
          type: integer
          minimum: 0
          nullable: true
        redCards:
          type: integer
          minimum: 0
          nullable: true
        yellowCards:
          type: integer
          minimum: 0
          nullable: true
        assists:
          type: integer
          minimum: 0
          nullable: true
        fouls:
          type: integer
          minimum: 0
          nullable: true
        sets:
          type: integer
          minimum: 0
          nullable: true
        knockdowns:
          type: integer
          minimum: 0
          nullable: true

    ReasonError:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
